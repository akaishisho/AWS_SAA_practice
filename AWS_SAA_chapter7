#第7章 データベースサービス

##7-1 AWSのデータベースサービス
- AWSではデータベースサービスとして8つのサービスを提供している

###データベースの2大アーキテクチャ
- AWSが提供するデータベースサービスは以下の9つ
  - Amazon RDS
  - Amazon Redshift
  - Amazon DynamoDB
  - Amazon ElastiCache
  - Amazon Neptune
  - Amazon QLDB
  - Amazon DocumentDB
  - Amazon Keyspaces
  - Amazon Timestream
- アーキテクチャの分類方法は様々であるが、ここではRDBとNoSQLと呼ばれる2つのアーキテクチャに分類

###RDB(Relational Database)
- 関係データベースと呼ばれる
- データを表(テーブル)形式で表現し、各表の関係を定義・関連付けすることでデータを管理するデータベース
- RDBの各種操作にはSQL(Structured Query Language:構造化問い合せ言語)を使用
- Amazon RDSとAmazon RedshiftがRDBのサービス
- RDBの主なソフトウェアとしては、Oracle、Microsoft SQL Server、MySQL、PostgreSQLなどが挙げられる

###NoSQL(Not Only SQL)
- SQLを使わないデータベースアーキテクチャの総称として、NoSQLという言葉が登場
- 特徴
  - 柔軟でスキーマレスなデータモデル
  - 水平スケーラビリティ
  - 分散アーキテクチャ
  - 高速な処理
- Amazon DynamoDB,Amazon ElastiCache,Amazon Neptune,Amazon DocumentDB,Amazon KeyspacesがNoSQLのサービス
- NoSQLの主なソフトウェア
  - Redis,Memcached(Key-Valueストア)
  - Cassandra,HBase(カラム指向データベース)
  - MongoDB,CouchDB(ドキュメント指向データベース)
  - Neo4j,Titan(グラフ指向データベース)

###RDBとNoSQLの得意・不得意を理解する
- これまでのシステムは、データベースと言えばシステムの中にRDBが1つあり、保持しておく必要があるデータはすべてその中に格納するという構成が大半を占めている
- NoSQLは、RDBを完全に置き換えるものではない
- アプリケーションのユースケースに応じて複数のデータベースを使い分けるという考え方を持つようにすること

##7-2 RDS
- Amazon RDSは、AWSが提供するマネージドRDBサービス
- バックアップやハードウェアメンテナンスなどの運用作業、障害時の復旧作業はAWSが提供するマネージドサービスを利用することで、データベースの運用をシンプルかつ低コストに実現できる
- RDSでは複数のデータベースエンジンで利用できるが、提供されている機能のうち、RDSでは使用できない機能もあるため、機能制限を確認する必要あり
- アプリケーションの仕様上、RDSでは使えない機能が必要な場合は、EC2インスタンスにデータベースエンジンをインストールして使うなどの検討が必要
- DBインスタンスはEC2と同じく、複数のインスタンスタイプから適正なスペックのものを選択できるが、データベースエンジンによっては選択できるインスタンスタイプが限定されることもある
- 各データベースエンジン機能のサーポートについて
  - MySQL
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.Features
  - MariaDB
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.FeatureNonSupport
  - PostgreSQL
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.FeatureExtensions
  - Oracle 12c
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Oracle.html#Oracle.Concepts.FeatureSupport.12c
  - Oracle 18c
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Oracle.html#Oracle.Concepts.FeatureSupport.18c
  - Oracle 19c
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_Oracle.html#Oracle.Concepts.FeatureSupport.19c
  - Microsoft SQL Server
    - https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.FeatureNonSupport

###RDSで使えるストレージタイプ
- RDSのデータ保存用ストレージには、EBSを使う
- EBSの中でもRDSで利用可能なストレージタイプは、汎用SSD、プロビジョンドIOPS SSD、マグネティックの3つ
- 新しいDBインスタンスを作成するときには基本的にSSDを選択する
- ストレージの容量は64TB(Microsoft SQL Serverは16TB)まで拡張が可能
- 拡張はオンライン状態で実施可能であるが、拡張中は若干のパフォーマンス劣化が見られるため、利用頻度が比較的少ない時間帯に実施すること

###RDSの特徴
- RDSを使うことのメリットに運用の効率化・省力化が挙げられる

###マルチAZ構成
- 1つのリージョン内の2つのAZにDBインスタンスをそれぞれ配置し、障害発生時やメンテナンス時のダウンタイムを短くすることで高可用性を実現するサービス
- DBインスタンス作成時にマルチAZ構成を選択するだけで、あとは全てAWSが自動でDBの冗長化に必要な環境を構成してくれる
- 本番環境でRDSを使用するときはマルチAZ構成が推奨
- 利用時に意識しておくことが2つ
  - 書き込み速度が遅くなる
    - 2つのAZ間でデータを同期するため、シングルAZ構成よりも書き込みやコミットにかかる時間が長くなる
    - 本番環境でマルチAZ構成を利用する場合は、性能テスト実施時にマルチAZ構成にした状態でテストが必要
  - フェイルオーバーには60〜120秒がかかる
    - フェイルオーバーが発生した場合、RDSへの接続用FQDNのDNSレコードが、スタンバイ側のIPアドレスに書き換えられる
    - 異常を検知してDNSレコードの情報が書き換えられ、新しい接続先IPの情報が取得できるようになるまではDBに接続することができない
    - アプリケーション側でDB接続先IPのキャッシュを持っている場合は、RDSフェイルオーバー後にアプリケーションからRDSに接続できるようになるまで、120秒以上の時間がかかることもある

###リードレプリカ
- 通常のRDSとは別に、参照用のDBインスタンスを作成することができるサービス
- すべてのデータベースエンジンでリードレプリカが利用できるようになっている
- 一方で、OracleとSQL Serverについては、利用方法や利用できるライセンス種別に制約がある
- リードレプリカを作成することで、マスターDBの負荷を抑えたり、読み込みが多いアプリケーションにおいてDBリソースのスケールアウトを容易に実現することが可能
- マスターとリードレプリカのデータ同期は、非同期レプリケーション方式である点は覚えておくこと
- リードレプリカを参照するタイミングによっては、マスター側で更新された情報が必ずしも反映されていない可能性がある
- マルチAZ構成のスタンバイ側へのデータ同期のようにマスターDBのパフォーマンスに影響を与えることはほとんどない

###バックアップ/リストア
- 自動バックアップ
  - バックアップウィンドウと保持期間を指定することで、1日に1回自動的にバックアップ(DBスナップショット)を取得してくれるサービス
  - バックアップの保持期間は最大35日
  - バックアップからDBを復旧する場合は、取得したスナップショットを選択して新規RDSを作成
  - 稼働中のRDSにバックアップのデータを戻すことはできない
  - 削除するDBインスタンスを再度利用する可能性がある場合は、削除時に最終スナップショットを取得するオプションを利用
- 手動スナップショット
  - 任意のタイミングでRDBのバックアップ(DBスナップショット)を取得できるサービス
  - 必要に応じてバックアップを取得できるが、手動スナップショットは1リージョンあたり100個までという取得数の制限がある
  - RDS単位ではなく、リージョン単位の制限であることに注意
  - シングルAZ構成でスナップショットを取得する場合、短時間のI/O中断時間があることも要注意
  - この仕様は自動バックアップでも同様
  - マルチAZ構成の場合はスタンバイ側のDBインスタンスからスナップショットを取得するため、マスターのDBインスタンスには影響を与えない
- データのリストア
  - RDSにデータをリストアする場合は、自動バックアップ、および手動で取得したスナップショットから新規のRDSを作成する
  - スナップショット一覧から戻したいスナップショットを選択するだけで、非常に簡単にデータをリストアできる
- ポイントインタイムリカバリー
  - 直近5分前から最大35日前までの任意のタイミングの状態のRDSを新規に作成することができるサービス
  - 戻すことができる最大日数は自動バックアップの取得期間に準ずる
  - 使用したい場合は自動バックアップを有効にする必要あり

###セキュリティ
- RDSが実装する2つのセキュリティサービスについて
  - ネットワークセキュリティ
    - RDSはVPCに対応しているため、インターネットに接続できないAWSのVPCネットワーク内で利用可能なサービス
    - デフォルトではオフになっている
    - EC2同様、セキュリティグループによる通信要件の制限が可能
    - EC2や他のAWSサービスからRDSまでの通信も、各データベースエンジンが提供するSSLを使った暗号化に対応している
  - データ暗号化
    - RDSの暗号化オプションを有効にすることで、データが保存されるストレージ(リードレプリカ用も含む)やスナップショットだけではなく、ログなどのRDSに関するすべてのデータが暗号化された状態で保持される
    - 途中から有効にすることはできない
    - 既にあるデータに対して暗号化を実施したい場合は、スナップショットを取得してスナップショットの暗号化コピーを作成
    - 作成された暗号化スナップショットからDBインスタンスを作成することで既存データの暗号化がなされる

###Amazon Aurora
- AWSが独自に開発した、クラウドのメリットを最大限に活かしたアーキテクチャを採用したデータベースエンジン

###Auroraの構成要素
- DBインスタンスを作成すると同時にDBクラスタが作成される
- DBクラスタは、1つ以上のDBインスタンスと、各DBインスタンスから参照するデータストレージ(クラスターボリューム)で構成される
- Auroraのデータストレージは、SSDをベースとしたクラスタボリューム
- クラスタボリュームは、単一のリージョン内の3つのAZにそれぞれ2つ(計6つ)のデータコピーで構成され、各ストレージ間のデータは自動的に同期される
- 作成時に容量を指定する必要がなく、Aurora内に保存されるデータ量に応じて最大64TBまで自動的に拡縮する

###Auroraレプリカ
- 他のRDSと異なりマルチAZ構成オプションはない
- Auroraクラスタ内に参照専用のレプリカインスタンスを作成することができる
- 他のRDSのリードレプリカとの違いは、Auroraのプライマリインスタンスに障害が発生した場合にレプリカインスタンスがプライマリインスタンスに昇格することでフェイルオーバーを実現する点

###エンドポイント
- Auroraでは、次の3種類のエンドポイントが作成される
  - クラスタエンドポイント
    - プライマリインスタンスに接続するためのエンドポイント
    - クラスタエンドポイント経由で接続した場合、データベースのすべての操作(参照、作成、更新、削除、定義変更)を受け付けることができる
  - 読み取りエンドポイント
    - レプリカインスタンスに接続するためのエンドポイント
    - 読み取りエンドポイント経由で接続した場合、データベースぬ対しては参照のみ受け付ける
    - Auroraクラスタ内に複数のレプリカインスタンスがある場合は、読み取りエンドポイントに接続することで自動的に負荷分散が行われる
  - インスタンスエンドポイント
    - Auroraクラスタを構成する各DBインスタンスに接続するためのエンドポイント
    - 接続したDBインスタンスがプライマリインスタンスである場合はすべての操作が可能
    - レプリカインスタンスである場合は参照のみ可能
    - 特定のDBインスタンスに接続したいという要件の場合に使用

##7-3 Redshift
- Amazon Redshiftは、AWSが提供するデータウェアハウス向けのデータベースサービス
- 大量のデータから意思決定に役立つ情報を見つけ出すために必要な環境を素早く安価に準備できる
- 一般的に提供されてきたものの導入コストと比較して10分の1〜100分の1程度で始めることができるため、データウェアハウスを活用したビックデータ解析の導入障壁を一気に下げたサービス

###Redshiftの構成
- 複数のノードによる分散並列実行が大きな特徴
- 1つのRedshiftを構成する複数のノードのまとまりをRedshiftクラスタと呼ぶ
- クラスタは1つのリーダーノードと複数のコンピュートノードから構成される
- 複数のコンピュートノードをまたがずに処理が完結できる分散構成をいかに作れるかがポイント
  - リーダーノード
    - SQLクライアントやBIツールからの実行クエリを受け付けて、クエリの解析や実行プランの作成を行う
    - コンピュートノードの数に応じて最適な分散処理が実行できるようにするいわば司令塔のような役割
    - 各コンピュートノードからの処理結果を受けてレスポンスを返す役割も担う
    - リーダーノードは各クラスタに1台のみ存在
  - コンピュートノード
    - リーダーノードからの実行クエリを処理するノード
    - 各コンピュートノードはストレージとセットになっている
    - コンピュートノードを追加することでリソースを増やすことができ、Redshiftクラスタとしてのパフォーマンスが向上する
- ノードスライス
  - Redshiftが分散並列処理をする最小の単位
  - コンピュートノードの中でさらにリソースを分割してスライスという単位を構成する
  - ノード内のスライス数はコンピュートノードのインスタンスタイプによって異なる

###Redshiftの特徴

###列指向型(カラムナ)データベース
- データウェアハウスでは、大量のデータに対して集計処理をすることがメイン
- 最大のボトルネック要因はデータI/O
- 必要なデータに効率的にアクセスできる仕組みはパフォーマンスの観点から重要
- 列指向型データベースは、集計処理に使われるデータをまとめて管理し、ストレージからのデータ取得を効率化する

###多くの圧縮エンコード方式への対応
- データI/Oのボトルネックを発生させないための方法として、取得するデータ量を削減するアプローチもある
- 9種類の圧縮エンコード方式に対応している
- 列ごとに圧縮エンコード方式が指定可能なため、データの性質にあった方式を選択することで効率的なデータ圧縮を実現

###ゾーンマップ
- Redshiftではブロック単位でデータが格納される
- 1ブロックの容量は1MB
- ゾーンマップとは、そのブロック内に格納されているデータの最小値と最大値をメモリに保存する仕組み
- データ検索条件に該当する値の有無を効率的に判断でき、データが存在しない場合はそのブロックを読み飛ばして処理を高速化する

###柔軟な拡張性
- 柔軟な拡張性を実現している仕組みはMPP(Massively Parallel Processing)とシェアードナッシングの2つ
  - MPP
    - 1回の集計処理を複数のノードに分散して実行する仕組み
    - この仕組みにより、ノードを追加するだけで分散並列処理のパフォーマンスを向上させることができる
  - シェアードナッシング
    - 各ノードがディスクを共有せず、ノードとディスクセットで拡張する仕組み
    - 複数のノードが同一のディスクを共有することによるI/O性能の劣化を回避するために採用されている

###ワークロードの管理機能
- 多種多様なデータ解析要求を効率的に処理するための管理機能(Workload Management,WLM)が用意されている
- パラメータグループにあるwlm_json＿configurationパラメータでクエリの実行に関する定義が可能

###Redshift Spectrum
- S3に置かれたデータを外部テーブルとして定義できるようにし、Redshift内にデータを取り込むことなくクエリの実行を可能にする拡張サービス
- かつてRedshiftを使う上では以下のような課題があったが、それらを解決するソリューションとして登場
  - S3からRedshiftへのデータロード(COPY)に時間がかかる
  - データの増加に伴いRedshiftクラスタのストレージ容量を拡張する必要があるが、CPUやメモリも追加されてしまいコスト高になる

##7-4 DynamoDB
- Amazon DynamoDBは、AWSが提供するマネージドNoSQLデータベースサービス
- テーブルやインデックスを作成する際に、読み取り・書き込みに必要なスループットを指定してリソースを確保することで、安定した性能を担保する仕組み
- データを保存するディスク容量も必要に応じて拡縮することが可能
- トランザクション機能にも対応
- DynamoDBは拡張性に優れたKey-Value型のデータベース
- 以下のようなシステムのアプリケーション用のデータベースとして利用するとメリット
  - 高い信頼性と拡張性を必要とするシステム
  - スループットが増減するようなピーク帯のあるシステム
  - 大量のデータを蓄積して高速な検索が可能なシステム
  - 広告やゲームなどのユーザー行動履歴を管理するシステム
  - Webアプリケーションの永続的セッションデータベース

###DynamoDBの特徴

###高可用性設計
- 単一障害点を(Single Point Of Failure,SPOF)を持たない構成となっているため、サービス面での障害対応やメンテナンス時の運用を考える必要がほとんどない
- DynamoDB内のデータは自動的に3つのAZに保存される仕組みになっているため、非常に可用性が高いサービスと言える

###スループットキャパシティ
- スループットキャパシティは読み取りと書き込みそれぞれ個別に、キャパシティユニットを単位として指定
  - Read Capacity Unit(RCU)
    - 読み取りのスループットキャパシティを指定する指標
    - 1RCUは、最大4KBの項目に対して、1秒あたり1回の強力な整合性のある読み取り性能、あるいは1秒あたり2回の結果的に整合性のある読み取り性能を担保することを表す
  - Write Capacity Unit(WCU)
    - 書き込みのスループットキャパシティを指定する指標
    - 1WCUは最大1KBの項目に対して、1秒あたり1回の書き込み性能を担保することを表す
- スループットキャパシティの変更は、増加させるのに制限はないが、減少については1日9回までの制限あり
- スループットキャパシティの自動スケーリング
  - 負荷の状況に応じてスループットキャパシティを自動的に増減することができる

###データパーティショニング
- データをパーティションという単位で分散保存する
  - 1つのパーティションに対して保存できる容量やスループットキャパシティが決まっているため、データの増加や指定したスループットのサイズによって最適化された状態を保つようにパーティションを拡張する
  - この制御はDynamoDB内で自動的に行われる

###プライマリキーとインデックス
- Key-Value型のデータベースであるため、格納されるデータ項目はキーとなる属性とその他の情報によって構成される
- プライマリキー
  - データ項目を一意に特定するための属性で、「パーティションキー」単独のものと、「パーティションキー＋ソートキー」の組み合わせで構成されるもの(複合キーテーブル)の2種類
  - インデックスとしても利用され、データ検索の高速化に役立つ
  - プライマリキーだけで高速な検索要件を満たすことができない場合、セカンダリインデックスを作成することで高速な検索を可能にする
- セカンダリインデックス
  - ローカルセカンダリインデックス(LSI)とグローバルセカンダリインデックス(GSI)の2種類ある
    - ローカルセカンダリインデックス(LSI)
      - プライマリキーはテーブルで指定したパーティションキーと同じで、別の属性をソートキーとして作成するインデックスのことを指す
      - 元テーブルと同じパーティション内で検索が完結することから「ローカル」という名前が付けられている
    - グローバルセカンダリインデックス(GSI)
      - プライマリキーとは異なる属性を使って作成するインデックスのことを指す
      - GSIはテーブルとは別のキャパシティユニットでスループットを指定する
- セカンダリインデックスは便利であるが、Key-Value型のデータベースの使い方の本質ではない

###期限切れデータの自動メンテナンス(Time to Live,TTL)
- DynamoDB内の各項目には有効期間を設定でき、有効期間を過ぎたデータは自動的に削除される
- データは即時削除されるわけではなく、有効期間が切れてから最大48時間以内に削除される
- 自動メンテナンスによるデータ削除操作はスループットキャパシティユニットを消費しないため、この機能を有効活用することで過去データのメンテナンスを効率的に実施できる

###DynamoDB Streams
- DynamoDBに対して行われた直近24時間の追加・更新・削除の変更履歴を保持する機能
- 変更内容に応じた処理をリアルタイムで実行するなどの仕組みを構築できる

###強い一貫性を持った参照(Consistent Read)
- DynamoDBは結果整合性のデータモデルを採用したデータベース
- このオプションを有効にすると、参照のリクエストがあった時点よりも前に書き込まれているデータがすべて反映された状態のデータを元に参照結果を返すようになる
- このオプションを利用するとRCUは2倍消費される点は注意
- Key-Value型のデータベースの本来の使用ではない

###DynamoDB Accelerator(DAX)
- DynamoDBの前段にキャッシュクラスタを構成する拡張サービス
- DAXを利用すると毎秒数百万もの読み取り処理でもマイクロ秒単位での応答を実現する
- 性能が格段に向上、また、DynamoDBに対して直接読み取り操作を実施する回数が減少するため、RCUの確保を抑え、コスト削減にも大きく貢献する

##7-5 ElastiCache
- Amazon ElastiCacheはAWSが提供するインメモリ型データベースサービス
- 高頻度で参照するデータや検索に時間がかかるデータセットをメモリ上に保存することで、システムのパフォーマンス向上に寄与する
- MemcachedとRedisの2種類のエンジンをサポート
  - Memcached
    - KVS型インメモリデータベースのデファクトスタンダードとして広く利用されているエンジン
    - 非常にシンプルなデータ構造で、データ処理パフォーマンスの向上に特化したキャッシュシステム
    - データの永続性機能はないため、再起動が行われた場合、すべてのデータが消去される
    - 以下の用途で選択するとよい
      - シンプルなキャッシュシステムを利用したい
      - 万が一データが消えたとしてもシステムの動作に大きな影響を与えない(なくても動く)
      - 必要なキャッシュリソースの増減が頻繁で、スケールアウト/スケールインをする必要がある
  - Redis
    - KVS型インメモリデータベースであることは同じであるが、Memcachedよりも多くのデータ型が扱え、キャッシュ用途だけではなくメッセージブローカーやキューを構成する要素としても利用される
    - ノード間のレプリケーション機能やデータ永続性機能といった可用性面も考慮された機能が実装されている
    - 以下の用途の場合はRedisを選択するとよい
      - 文字列、リスト、セット、ストアドセット、ハッシュ、ビットマップなど、多様なデータ型を使いたい
      - キーストアに永続性を持たせたい
      - 障害発生時に自動的にフェイルオーバーしたり、バックアップ/リストアなどの可用性が欲しい

###Memcached版ElastiCacheの特徴

##クラスタ構成
- 最大20のElastiCacheインスタンスで構成される
- クラスタ内に保存されるデータは各インスタンスに分散される
- クラスタを複数インスタンスで作成するときは、可用性を考慮して複数のAZにElastiCacheインスタンスを作成すること
- クラスタを作成すると2種類のアクセス用エンドポイントが作成される
  - ノードエンドポイント
    - クラスタ内の各ノードに個別にアクセスするためのエンドポイント
  設定エンドポイント
    - クラスタ全体に割り当てられるエンドポイント
    - クラスタ内のノードの増減を管理し、クラスタの構成情報を自動的に更新する

##スケーリング
- スケールアウト、スケールイン、スケールアップ、スケールダウンから必要に応じてリソースを調整できる
  - スケールアウトとスケールイン時の注意点
    - ノード数を増減させた場合、正しいノードにデータが再マッピングされるまでの間、キャッシュミスが一時的に増加することがある
  - スケールアップとスケールダウン時の注意点
    - 新規のクラスタを作成する必要がある
    - データ永続性がないため、クラスタを再作成した場合、それまで保持していたデータはすべて削除される

##Redis版ElasticCacheの特徴

###クラスタ構成
- クラスタモードの有効/無効に応じて冗長化の構成が変わる
- どちらの場合でもマルチAZ構成を作成することができるため、マスターインスタンスが障害状態になったときはスタンバイインスタンスがマスターインスタンスに昇格する
  - クラスタモード無効
    - キャッシュデータはすべて1つのElastiCacheインスタンスに保存される
    - 同じデータを持つリードレプリカを最大5つまで作成できる
    - 1つのマスターインスタンスとリードレプリカのまとまりをシャードと呼ぶ
  - クラスタモード有効
    - 最大500のシャードにデータを分割して保存できる構成が可能
    - リードレプリカは1つのシャードに対して最大5つまで作成できる
    - データの分散によりRead/Writeの負荷分散構成を作成することが可能
- アクセス用エンドポイントは以下の通り
  - ノードエンドポイント
    - クラスタ内の各ノードに個別にアクセスするためのエンドポイント
    - クラスタモードが有効/無効どちらの場合も使える
  - プライマリエンドポイント
    - 書き込み処理用のElastiCacheインスタンスへアクセスするためのエンドポイント
    - クラスタモードが無効の場合に使用する
  - 設定エンドポイント
    - クラスタモードが有効の場合、この設定エンドポイントを使ってElastiCacheクラスタに対するすべての操作を行うことが可能

###スケーリング
- スケーリング中には処理の大部分がオフラインとなるので、計画を立てて行う必要あり

###CPU使用率
- Redisはシングルスレッドのため、1コアで動作する
- 4コアのインスタンスタイプを使用していても1コアしか使われないので、CPU使用率は25%が最大値

###データ暗号化
- RedisクライアントとElasticCache間の通信とElastiCache内に保存するデータの暗号化をサポートしている
- データ暗号化はRedis版のElastiCacheのみ対応している

##7-6 その他のデータベース

###Amazon Neptune
- フルマネージドのグラフデータベースサービス
- グラフデータベースは、「ノード」「エッジ」「プロパティ」の3つの要素によって構成されていて、ノード間の「関係性」を表す
- データ構造はネットワーク型になり、FacebookやTwitterのソーシャルグラフのような関係を表現するのに適している
- 経路検索や購入履歴からのレコメンデーションなどにも利用される

###Amazon DocumentDB
- フルマネージドなMongoDB互換のドキュメントデータベースのサービス
- インターフェイス面でMongoDBと互換性があり、サーバー上で独自に構築したMongoDBをDocumentDBに移行することも可能

###Amazon Keyspaces
- フルマネージドなApach Cassandra互換のデータベースサービス
- サービスとしての特徴はDocumentDB同様に、AWSがマネージドな互換データベースを出していることにある
- Cassandraは列指向データと行指向データの両方の特徴を兼ね備えているので、検索性も高く任意のデータをまとめて取得するといったことも得意としている

###Amazon Timestream
- フルマネージドな時系列データベースサービス
- 時系列データベースとは、時系列データを扱うことに特化したデータベース
- 時系列データとは、サーバーのメモリやCPUなどの利用状況の推移やあるいは気温の移り変わりなど、時間的に変化した情報を持つデータのこと
- これらのデータをリレーショナデータベースの千倍の速度で、かつ低コストに処理・分析できるように設計されている
- IoTやサーバーモニタリング用途に最適

###Amazon QLDB
- QLDB(Quantum Ledger Database)は、フルマネージドな台帳データベースと呼ばれる
- 台帳データベースとは変更履歴などをすべて残し、かつその履歴を検証可能な状態にするもの
- 企業の経済活動や財務活動を履歴として記録する必要がある場合に適したサービス
- QLDBを活用することにより、Hyperledger FabricやEthereumなどのブロックチェーンフレームワークと同様の機能を得ることが可能