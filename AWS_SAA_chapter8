#第8章 セキュリティとアイデンティティ

##8-1 セキュリティとアイデンティティ

###AWSのアカウントの種類
- AWSには「AWSアカウント」と「IAMユーザー」と呼ばれる2種類のアカウントがある
  - AWSアカウント
    - AWSへサインアップするときに作成されるアカウント
    - AWSのすべてのサービスをネットワーク上のどこからでも利用可能なため、そのユーザーはルートユーザーとも呼ばれる
  - IAMユーザー
    - AWSを利用する各利用者向けに作成されるアカウント
    - 初期状態ではIAMユーザーは存在しない
    - AWSアカウントでログインし、必要に応じてIAMユーザーを作成する
- 複数のAWSアカウントを管理するためのAWS Organizations(組織アカウント)という機能も追加されている
- 組織アカウントを利用することで、複数のアカウントの請求をひとまとめにする一括決済が可能となっている
- 利用可能なサービスをAWSアカウント単位で制限するサービスコントロールポリシー(SCP)も利用できるようになっている

###AWSアカウント
- ルートユーザーはAWSの全サービスに対してネットワーク上のどこからも操作できる権限を持っている
- 強力なアカウントであるため、取り扱いには注意する必要がある
- AWSでシステムを構築・運用する場合は、IAMユーザーを利用することが推奨
- AWSアカウント単位では利用シーンを制御する方法がないため、多要素認証(MFA)の設定をしておくことが推奨される

###IAMユーザー
- IAMユーザーは、AWSの各利用者がWebコンソールにログインして操作するときや、APIを利用してAWSを操作するときなどに使用する
- 各IAMユーザーに対して、操作を許可する(しない)サービスが定義できる
- 各IAMユーザーの権限を正しく制限することで、AWSをより安全に使用できる
- IAMユーザーの管理はセキュリティの要
- VPCやEC2・S3をどんなにセキュアに保って管理しても、IAMユーザーの管理が杜撰であれば、AWSの乗っ取りは簡単であるため、管理はとても重要

###IAMの機能
IAM(Identity and Access Management)の主要な機能には次の4つ
  - IAMポリシー
  - IAMユーザー
  - IAMグループ
  - IAMロール
- ユーザーに権限を付与するまでの流れ
  - AWSサービスやAWSリソースに対する操作権限をIAMポリシーとして定義する
  - IAMポリシーをIAMユーザーやIAMグループにアタッチする
  - IAMユーザーあるいはIAMグループに属するIAMユーザーがマネジメントコンソールにログインすると、付与された権限の操作を行うことができる
- IAMユーザーは、利用者を特定することを前提として利用する
- IAMロールは、必要に応じてどのような権限を付与するかという役割を与えるサービス

###IAMポリシー
- IAMポリシーは、Action(どのサービスの)、Resource(どういう機能や範囲を)、Effect(許可/拒否)という3つの大きなルールに基づいて、AWSの各サービスを利用する上での様々な権限を設定

###インラインポリシーと管理(マネージド)ポリシー
- IAMでは、ユーザーやグループ、ロールに付与する権限をオブジェクトとして管理することが可能で、これをポリシーと呼ぶ。
- ポリシーには、インラインポリシーと管理ポリシーがある
  - インラインポリシー
    - 対象ごとに作成・付与するポリシーで、複数のユーザーやグループに同種の権限を付与するには向かない
  - 管理ポリシー
    - 1つのポリシーを複数のユーザーやグループに適用できる
    - 管理ポリシーには、AWS管理ポリシーとカスタマー管理ポリシーの2種類ある
      - AWS管理ポリシー
        - AWS側が用意しているポリシーで、管理者権限やPowerUser、あるいはサービスごとのポリシーなどがある
      - カスタマー管理ポリシー
        - ユーザー自身が管理するポリシー
        - 記述方法自体はインラインポリシーと同じであるが、個別のユーザー・グループ内に閉じたポリシーなのか共有できるのかの違いがある
        - 最大過去5世代までのバージョンを管理できる
        - 変更した権限に誤りがあった場合、即座に前のバージョンの権限に戻すといったことが可能
- 使い分けとしては、AWS管理ポリシーで基本的な権限を付与し、カスタマー管理ポリシーでIPアドレス制限などの制約を行う
- インラインポリシーについては、管理が煩雑になるため基本的には使わない方針がよい
- ただし、一時的に個別のユーザーに権限を付与するときに利用するといった方法は考えられる

###IAMユーザーとIAMグループ
- ユーザーとはAWSを利用するために各利用者に１つずつ与えられる認証情報(ID)
- ここでの利用者には、人だけでなく、APIを呼び出したりCLIを実行したりする主体も含まれる
- IAMユーザーの認証方法は次の2通り
  - ユーザーIDとパスワード
    - Webコンソールにログインするときに使用、多要素認証(MFA)を組み合わせるとよい
  - アクセスキーとシークレットアクセスキー
    - CLIやAPIからAWSのリソースにアクセスする場合に使用
- グループは、同じ権限を持ったユーザーの集まり
- AWSへのアクセス認証情報は保持しない
- 認証はあくまでユーザーで行い、グループは認証されたユーザーがどういった権限を持つのか管理する
- グループの目的は、権限を容易かつ正確に管理すること
- 複数のユーザーに同一の権限を個別に与えると、権限の付与漏れや過剰付与など、ミスが発生する確率が高くなる
- ユーザーとグループは多対多の関係を持つことができるので、1つのグループに複数のユーザーが属することはもちろん、1人のユーザーが複数のグループに属することもできる
- グループを階層化することはできないので、グループに一定の権限をまとめておき、ユーザーに対して必要なグループを割り当てる

###IAMロール
- IAMロールは、永続的な権限を保持するユーザーと異なり、一時的にAWSリソースのアクセス権限を付与する場合に使用する
- 以下のような使い方をする場合は、ロールを定義して必要なAWSリソースに対するアクセス権限を一時的に与えることで実現可能
  - AWSリソースへの権限付与
    - EC2インスタンス上で稼働するアプリケーションに一時的にAWSのリソースへアクセスする権限を与えたい（EC2インスタンス作成時にロールを付与することで可能）
  - クロスカウントアクセス
    - 複数のAWSアカウント間のリソースを1つのIAMユーザーで操作したい
  - IDフェデレーション
    - 社内のAD(Active Directory)サーバーに登録されているアカウントを使用して、AWSリソースにアクセスしたい
  - Web IDフェデレーション
    - FacebookやGoogleのアカウントを使用してAWSリソースにアクセスしたい

##8-2 KMSとCloudHSM
- 機密性の高いデータを運用するには、暗号化の施策が必要になる
- その際に重要になるのが、暗号化や復号のための鍵の管理
- AWS KeyManagement ServiceやAWSCloudHSMは暗号化の作成と管理のためのサービス

###KMSとCloudHSM
- CloudHSMは、VPC内で専有のハードウェアを利用して鍵を管理するサービス
- KMSはAWSが管理するマネージドサービス
- 両者の大きな違いは、信頼の起点がユーザー自身なのか、AWSに委ねるのかの違い
- CloudHSMは専有ハードウェアを用いるため、初期コストも月次の固定費も必要
- そのため、大規模なシステムや特定の規制・法令に準拠する目的以外では、利用するケースはなかなかない
- 秒間100を超える暗号化リクエストがある、あるいは公開鍵暗号化を使いたい場合にはCloudHSMを利用し、それ以外にはKMSを使う形になる

###KMSの機能
- KMSの主な機能は、鍵管理機能とデータ暗号化機能。このうち、データ暗号化機能としては3つのAPIがある
- Encrypt
- Decrypt
- GenerateDataKey
- Encryptはデータを暗号化するためのAPI、4KBまでの平文データに対応
- Decryptは複合のためのAPI
- GenerateDataKeyは、ユーザーがデータの暗号化に利用するための、カスタマーデータキーを生成
- 平文の鍵と、Encrypt APIで暗号化された鍵を返す、この理解にはマスターキーとデータキーの概念理解が必要

###マスターキーとデータキー
- KMSでは、主に2つの鍵を管理
- マスターキーとデータキーで、AWSでは、Customer Master Key(CMK)及びCustomer Data Key(CDK)と表現されることが多い
- CMKは、データキーを暗号化するための鍵
- CDKは、データを暗号化するための鍵
- KMSでは、データの暗号化に際して、データキーでデータを暗号化してから、そのデータキーをマスターキーで暗号化する手法をとっている
- これはデータキーの保護のためで、この手法はエンベロープ暗号化と呼ばれる
- 2層構造になっているのは、セキュリティの向上のため
- データキーについては、基本的にS3、EBS、Redshiftなど、暗号化の対象ごとに作成
- そうすることでデータキーの漏洩の際のリスクを限定化する
- データーキーをマスターキーで暗号化することで実際の運用で使う機会が多いデータキーを保護する
- マスターキーを集中管理することで、全体としてセキュリティを高めることができる

###kクライアントサイド暗号化とサーバーサイド暗号化
- 暗号化については、どこで暗号化するかという点も重要
- クライアントサイド暗号化は、ユーザー側の処理で暗号化する方式
- AWSが提供するSDKを利用して行う
- EC2やLambda内のプログラムで暗号化した場合も、クライアントサイド暗号化になる
- 経路の安全性が保障されない場合はクライアント側で暗号化したデータを送る
- AWS側の処理で暗号化するのがサーバーサイド暗号化
- AWSサービスが暗号化対応だという場合は、サーバーサイド暗号化が用いられていることになる
- クラインアントサイド暗号化のサービスは少なく、S3などの一部のサービスのみ

##8-3  AWS Certificate Manager
- サーバーとのやり取りの暗号化、またそのサーバーの信頼性を確認するために、サーバー証明書が利用される
- その際に利用されるプロトコルがSSL/TLSで、SSL証明書と呼ばれることが多い
- SSL証明書と呼ばれるが、実際に利用されているのはTLS
- SSL3.0には脆弱性があるため、既に非推奨となっている

###証明書の役割と種類
- 証明書を利用して実現できることは主に2つある
- 経路間の通信の安全性の確保
  - 通信内容を盗聴されないようにするための暗号化と、通信内容の改ざんを防止することがある
- 通信している相手が誰かの証明
  - 本人性を証明するには、信頼性が高い第三者が必要となる
- このためのSSL証明書は、認証局（CA）という、証明書を管理する機関により発行されている
- 証明の方法には以下の4つ
  - 自己証明書
    - 自分で認証局を立てて証明書を発行する（第三者による認証なし）
  - ドメイン認証（DV）
    - ドメインの所有のみを認証。組織情報の確認はされない
  - 組織認証（OV）
    - 組織情報の審査を経てから認証する
  - 拡張認証（EV）
    - OVより厳格な審査で認証する。アドレスバーに組織名が表示される（最近のブラウザでは表示されなくなっている）